<?xml version="1.0" encoding="utf-8" ?>
<!--
  * Copyright (c) 2008, 2010 Empolis GmbH and brox IT Solutions GmbH.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
  * Contributors:
  * Daniel Stucky (Empolis GmbH) - initial design
  * Igor Novakovic (Empolis GmbH) - added the invocation of SolrPipelet
-->
<process name="SolrAddPipeline" targetNamespace="http://www.eclipse.org/smila/processor"
  xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:proc="http://www.eclipse.org/smila/processor" xmlns:rec="http://www.eclipse.org/smila/record">

  <import location="processor.wsdl" namespace="http://www.eclipse.org/smila/processor"
    importType="http://schemas.xmlsoap.org/wsdl/" />

  <partnerLinks>
    <partnerLink name="Pipeline" partnerLinkType="proc:ProcessorPartnerLinkType" myRole="service" />
  </partnerLinks>

  <extensions>
    <extension namespace="http://www.eclipse.org/smila/processor" mustUnderstand="no" />
  </extensions>

  <variables>
    <variable name="request" messageType="proc:ProcessorMessage" />
  </variables>

  <sequence>
    <receive name="start" partnerLink="Pipeline" portType="proc:ProcessorPortType"
      operation="process" variable="request" createInstance="yes" />


		<extensionActivity>
		    <proc:invokePipelet name="invokeEnrichRecords">
		        <proc:pipelet class="it.polimi.mdir.text.EnrichRecords" />
		        <proc:variables input="request" />     
		    </proc:invokePipelet>
		</extensionActivity>
		
<!--	
		<extensionActivity>
		    <proc:invokePipelet name="invokePayloadAdder">
		        <proc:pipelet class="it.polimi.mdir.text.PayloadAdder" />
				<proc:variables input="request" />     
		    </proc:invokePipelet>
		</extensionActivity>
		
-->
		
 	  <!-- Sequences smilaFields and SolrAnalysisTypes must match each other.
	  They map a name of a field in the smila storage with the requested analysis for it.
	  Field in position 1 will have the fieldtype in position 1
	  Omit fields that don't need analysis
	  Id field is still required though, and is assumed to be the first entry of the list -->
	  <!--
		<extensionActivity>
          <proc:invokePipelet name="invokeSolrAnalyzerPipelet">
            <proc:pipelet class="it.polimi.mdir.solr.SolrAnalyzerPipelet" />
            <proc:variables input="request" />
            <proc:configuration>
			  <rec:Val key="writerType">xml</rec:Val>
			  <rec:Val key="indent">true</rec:Val>
              <rec:Val key="coreName">test_core</rec:Val>
			  <rec:Seq key="smilaFields">
			    <rec:Val>projectId</rec:Val>
				<rec:Val>Content</rec:Val>
			  </rec:Seq>
			  <rec:Seq key="solrAnalysisTypes">
			    <rec:Val>projectId</rec:Val>
				<rec:Val>text_A</rec:Val>
			  </rec:Seq>
            </proc:configuration>
          </proc:invokePipelet>
        </extensionActivity>
	-->
 
	  <!--the same but for indexing. List the fields you want to index in smilaFields and 
	  the respective name of the solrFields
	  The first entry of the sequence is considered the id.-->
		<extensionActivity>
          <proc:invokePipelet name="invokeSolrIndexerPipelet">
            <proc:pipelet class="it.polimi.mdir.solr.SolrIndexerPipelet" />
            <proc:variables input="request" />
            <proc:configuration>
              <rec:Val key="executionMode">ADD</rec:Val>
              <rec:Val key="commitWithin" type="long">10000</rec:Val>
              <rec:Val key="coreName">test_core</rec:Val>
			  <rec:Seq key="smilaFields">
			    <rec:Val>projectId</rec:Val>
				<rec:Val>projectName</rec:Val>		    
				<rec:Val>className</rec:Val>
				<rec:Val>conceptId</rec:Val>
				<rec:Val>conceptType</rec:Val>
			  </rec:Seq>
			  <rec:Seq key="solrFields">
			    <rec:Val>projectId</rec:Val>
				<rec:Val>projectName</rec:Val>
				<rec:Val>className</rec:Val>
				<rec:Val>conceptId</rec:Val>
				<rec:Val>conceptType</rec:Val>			
			  </rec:Seq>
            </proc:configuration>
          </proc:invokePipelet>
        </extensionActivity>

    <reply name="end" partnerLink="Pipeline" portType="proc:ProcessorPortType" operation="process"
      variable="request" />
    <exit />
  </sequence>
</process>
