<?xml version="1.0" encoding="utf-8"?><!--/*********************************************************************************************************************** * Copyright (c) 2008 empolis GmbH and brox IT Solutions GmbH. All rights reserved. This program and the accompanying * materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, * and is available at http://www.eclipse.org/legal/epl-v10.html * * Contributors: Georg Schmidt (brox IT Solutions GmbH) - initial creator **********************************************************************************************************************/--><XMLTreeViewConfig xmlns="http://projects.brox.de/XMLTreeView/Config.xsd" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://projects.brox.de/XMLTreeView/Config.xsd ..\xml\Config.xsd" xmlns:as="http://www.anyfinder.de/AdvancedSearch">  <CodeGeneration />  <Icons />  <ExternalItems>    <ExternalItem format="org.eclipse.smila.search.rapiddeployer.controls.datadictionarytreeview.DataDictionaryTreeNode">      <Types>        <Type type="QueryExpression">          <PropertyValue property="MaxHits">            <Constant value="50" />          </PropertyValue>          <PropertyValue property="MinSimilarity">            <Constant value="0" />          </PropertyValue>          <PropertyValue property="ShowHitDistribution">            <Constant value="true" />          </PropertyValue>          <PropertyMapping source="Text" target="IndexName" />          <TestBy_PropertyEquals property="NodeType" value="Index" />        </Type>        <Type type="QueryExpression">          <PropertyValue property="MaxHits">            <Constant value="50" />          </PropertyValue>          <PropertyValue property="MinSimilarity">            <Constant value="0" />          </PropertyValue>          <PropertyValue property="ShowHitDistribution">            <Constant value="true" />          </PropertyValue>          <PropertyMapping source="Text" target="IndexName" />          <TestBy_PropertyEquals property="FieldType" value="Text" />          <AsChild type="Text" parent="Parent.Parent">            <PropertyMapping source="FieldNo" target="FieldNo" />            <PropertyMapping source="FieldName" target="FieldName" />          </AsChild>        </Type>        <Type type="QueryExpression">          <PropertyValue property="MaxHits">            <Constant value="50" />          </PropertyValue>          <PropertyValue property="MinSimilarity">            <Constant value="0" />          </PropertyValue>          <PropertyValue property="ShowHitDistribution">            <Constant value="true" />          </PropertyValue>          <PropertyMapping source="Text" target="IndexName" />          <TestBy_PropertyEquals property="FieldType" value="Number" />          <AsChild type="Number" parent="Parent.Parent">            <PropertyMapping source="FieldNo" target="FieldNo" />            <PropertyMapping source="FieldName" target="FieldName" />          </AsChild>        </Type>        <Type type="QueryExpression">          <PropertyValue property="MaxHits">            <Constant value="50" />          </PropertyValue>          <PropertyValue property="MinSimilarity">            <Constant value="0" />          </PropertyValue>          <PropertyValue property="ShowHitDistribution">            <Constant value="true" />          </PropertyValue>          <PropertyMapping source="Text" target="IndexName" />          <TestBy_PropertyEquals property="FieldType" value="Date" />          <AsChild type="Date" parent="Parent.Parent">            <PropertyMapping source="FieldNo" target="FieldNo" />            <PropertyMapping source="FieldName" target="FieldName" />          </AsChild>        </Type>        <Type type="Text">          <PropertyMapping source="FieldNo" target="FieldNo" />          <PropertyMapping source="FieldName" target="FieldName" />          <TestBy_PropertyEquals property="FieldType" value="Text" />        </Type>        <Type type="Number">          <PropertyMapping source="FieldNo" target="FieldNo" />          <PropertyMapping source="FieldName" target="FieldName" />          <TestBy_PropertyEquals property="FieldType" value="Number" />        </Type>        <Type type="Date">          <PropertyMapping source="FieldNo" target="FieldNo" />          <PropertyMapping source="FieldName" target="FieldName" />          <TestBy_PropertyEquals property="FieldType" value="Date" />        </Type>      </Types>    </ExternalItem>  </ExternalItems>    <Macros>        <!-- Insert Section-->    <Macro macroId="InsertOP_1" menuText="OP_1" infoMessage="Insert OP_1 as parent">      <Insert targetNodeType="OP_1">        <PropertyValue property="Operation">          <Constant value="NOT"></Constant>        </PropertyValue>      </Insert>    </Macro>    <Macro macroId="InsertOP_N" menuText="OP_N" infoMessage="Insert OP_N as parent">      <Insert targetNodeType="OP_N">        <PropertyValue property="Operation">          <Constant value="AND"></Constant>        </PropertyValue>      </Insert>    </Macro>    <Macro macroId="InsertWMEAN" menuText="WMEAN" infoMessage="Insert WMEAN as parent">      <Insert targetNodeType="WMEAN">        <PropertyValue property="Operation">          <Constant value="MEAN"></Constant>        </PropertyValue>      </Insert>    </Macro>    <!-- Transform Section -->    <Macro macroId="TextTransformer" menuText="TextTemplate" infoMessage="Transform TextField to TemplateTextField">      <Transform targetNodeType="TextTemplate">        <Transform>          <PropertyMapping source="FieldNo" target="FieldNo" />          <PropertyMapping source="FieldNo" target="SourceFieldNo" />          <PropertyMapping source="Text" target="TextValue" />          <PropertyMapping source="FieldName" target="FieldName" />        </Transform>      </Transform>    </Macro>    <Macro macroId="NumberTransformer" menuText="NumberTemplate" infoMessage="Transform NumberField to TemplateNumberField">      <Transform targetNodeType="NumberTemplate">        <Transform>          <PropertyMapping source="FieldNo" target="FieldNo" />          <PropertyMapping source="FieldNo" target="SourceFieldNo" />          <PropertyMapping source="FieldName" target="FieldName" />          <PropertyMapping source="Min" target="Min" />          <PropertyMapping source="Max" target="Max" />        </Transform>      </Transform>    </Macro>    <Macro macroId="DateTransformer" menuText="DateTemplate" infoMessage="Transform DateField to TemplateDateField">      <Transform targetNodeType="DateTemplate">        <Transform>          <PropertyMapping source="FieldNo" target="FieldNo" />          <PropertyMapping source="FieldNo" target="SourceFieldNo" />          <PropertyMapping source="FieldName" target="FieldName" />          <PropertyMapping source="Min" target="Min" />          <PropertyMapping source="Max" target="Max" />        </Transform>      </Transform>    </Macro>    <Macro macroId="OP_NToWMEANTransformer" menuText="WMEAN" infoMessage="Transform OP_N to WMEAN">      <Transform targetNodeType="WMEAN">        <Transform>        </Transform>      </Transform>    </Macro>    <Macro macroId="WMEANToOP_NTransformer" menuText="OP_N" infoMessage="Transform WMEAN to OP_N">      <Transform targetNodeType="OP_N">        <Transform>        </Transform>      </Transform>    </Macro>  </Macros>    <Tuples>        <!-- Insert OP_1 tuples-->    <Tuple sourceNodeType="Text" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="Number" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="Date" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="TextTemplate" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="NumberTemplate" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="DateTemplate" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="WMEAN" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_N" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_1" targetNodeType="OP_1" operationCode="Insert">      <MacroIds>InsertOP_1</MacroIds>    </Tuple>    <!-- Insert OP_N tuples -->    <Tuple sourceNodeType="Text" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="Number" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="Date" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="TextTemplate" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="NumberTemplate" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="DateTemplate" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="WMEAN" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_N" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_1" targetNodeType="OP_N" operationCode="Insert">      <MacroIds>InsertOP_N</MacroIds>    </Tuple>    <!-- Insert WMEAN tuples -->    <Tuple sourceNodeType="Text" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="Number" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="Date" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="TextTemplate" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="NumberTemplate" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="DateTemplate" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="WMEAN" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_N" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_1" targetNodeType="WMEAN" operationCode="Insert">      <MacroIds>InsertWMEAN</MacroIds>    </Tuple>    <!-- Transform tuples -->    <Tuple sourceNodeType="Text" targetNodeType="TextTemplate" operationCode="Transform">      <MacroIds>TextTransformer</MacroIds>    </Tuple>    <Tuple sourceNodeType="Number" targetNodeType="NumberTemplate" operationCode="Transform">      <MacroIds>NumberTransformer</MacroIds>    </Tuple>    <Tuple sourceNodeType="Date" targetNodeType="DateTemplate" operationCode="Transform">      <MacroIds>DateTransformer</MacroIds>    </Tuple>    <Tuple sourceNodeType="OP_N" targetNodeType="WMEAN" operationCode="Transform">      <MacroIds>OP_NToWMEANTransformer</MacroIds>    </Tuple>    <Tuple sourceNodeType="WMEAN" targetNodeType="OP_N" operationCode="Transform">      <MacroIds>WMEANToOP_NTransformer</MacroIds>    </Tuple>      </Tuples>    <SchemaRedefinition schemaLocation="http://www.anyfinder.de/AdvancedSearch ../xml/AnyFinderAdvancedSearch.xsd">    <!-- Root element -->    <SchemaDef>      <RootElement select="/xs:schema/xs:element[@name='AnyFinderAdvancedSearch']" />    </SchemaDef>        <!-- Hidden elements -->    <ElementDef select="//xs:element[@name='AnyFinderAdvancedSearch']">      <HiddenParent>        <AnyFinderAdvancedSearch xmlns="http://www.anyfinder.de/AdvancedSearch" />      </HiddenParent>    </ElementDef>        <ElementDef select="//xs:element[@name='Term']">      <HiddenParent>        <Term xmlns="http://www.anyfinder.de/AdvancedSearch" />      </HiddenParent>    </ElementDef>        <!-- QueryExpression -->    <ElementDef select="//xs:element[@name='QueryExpression']">      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="IndexName" />        </NodeDisplay>        <Property attributeName="IndexName">          <Category format="Index node">          </Category>        </Property>        <Property attributeName="MaxHits">          <Category format="Index node">          </Category>        </Property>        <Property attributeName="MinSimilarity">          <Category format="Index node">          </Category>        </Property>        <Property attributeName="ShowHitDistribution">          <Category format="Index node">          </Category>        </Property>        <Property attributeName="ResultName">          <Category format="Index node">          </Category>        </Property>        <Property attributeName="StartHits">          <Category format="Index node">          </Category>        </Property>      </AsNode>    </ElementDef>        <!-- Text field -->    <ComplexTypeDef select="//xs:complexType[@name='TextField']" nodeTypeName="Text">      <MetaProperties>        <Property name="FieldName" merge="true">          <Category format="Field Nodes">          </Category>        </Property>      </MetaProperties>      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="FieldName"></Label>        </NodeDisplay>        <Property attributeName="FieldNo" merge="true">          <Category format="Field Nodes"></Category>        </Property>        <Property attributeName="Fuzzy" merge="true">          <Category format="TextField Nodes"></Category>        </Property>        <Property attributeName="Slop" merge="true">          <Category format="TextField Nodes"></Category>        </Property>        <Property attributeName="ParseWildcards" merge="true">          <Category format="TextField Nodes"></Category>        </Property>      </AsNode>    </ComplexTypeDef>        <ElementDef select="//xs:complexType[@name='TextField']//xs:element[@name='Text']">      <AsProperty merge="true">        <Category format="TextField Nodes">        </Category>      </AsProperty>    </ElementDef>        <!-- Number Field -->    <ComplexTypeDef select="//xs:complexType[@name='NumField']" nodeTypeName="Number">      <CustomValidator type="BROX.Windows.Forms.XMLTreeView.Validators.EvalValidator">        <ConstructorParameter type="System.String" description="Excluded parameters from normal validation" />        <ConstructorParameter type="System.String" description="Evaluated Expression">          <Value><![CDATA[LessOrEqual("Min", "Max")]]></Value>        </ConstructorParameter>      </CustomValidator>      <MetaProperties>        <Property name="FieldName" merge="true">          <Category format="Field Nodes"></Category>        </Property>      </MetaProperties>      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="FieldName"></Label>        </NodeDisplay>        <Property attributeName="FieldNo" merge="true">          <Category format="Field Nodes"></Category>        </Property>      </AsNode>    </ComplexTypeDef>        <ElementDef select="//xs:complexType[@name='NumField']//xs:element[@name='Min']">      <AsProperty merge="true">        <Category format="NumberField Nodes"></Category>      </AsProperty>    </ElementDef>        <ElementDef select="//xs:complexType[@name='NumField']//xs:element[@name='Max']">      <AsProperty merge="true">        <Category format="NumberField Nodes"></Category>      </AsProperty>    </ElementDef>        <!-- Date field -->    <ComplexTypeDef select="//xs:complexType[@name='DateField']" nodeTypeName="Date">      <CustomValidator type="BROX.Windows.Forms.XMLTreeView.Validators.EvalValidator">        <ConstructorParameter type="System.String" description="Excluded parameters from normal validation" />        <ConstructorParameter type="System.String" description="Evaluated Expression">          <Value><![CDATA[LessOrEqual("Min", "Max")]]></Value>        </ConstructorParameter>      </CustomValidator>      <MetaProperties>        <Property name="FieldName" merge="true">          <Category format="Field Nodes"></Category>        </Property>      </MetaProperties>      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="FieldName"></Label>        </NodeDisplay>        <Property attributeName="FieldNo" merge="true">          <Category format="Field Nodes"></Category>        </Property>      </AsNode>    </ComplexTypeDef>        <ElementDef select="//xs:complexType[@name='DateField']//xs:element[@name='Min']">      <AsProperty merge="true">        <Category format="DateField Nodes">        </Category>      </AsProperty>    </ElementDef>        <ElementDef select="//xs:complexType[@name='DateField']//xs:element[@name='Max']">      <AsProperty merge="true">        <Category format="DateField Nodes">        </Category>      </AsProperty>    </ElementDef>        <!-- Template Fields  -->    <ComplexTypeDef select="//xs:complexType[@name='TemplateField']" nodeTypeName="TemplateField" />    <ComplexTypeDef select="//xs:complexType[@name='TextTemplateField']" nodeTypeName="TextTemplate" SerializeDeserializeConverter="org.eclipse.smila.search.rapiddeployer.converters.TemplateFieldSerializeConverter">      <MetaProperties>        <Property name="as:TextValue" merge="true">          <Category format="TemplateField Search Nodes" />        </Property>        <Property name="as:FieldName" merge="true">          <Category format="Field Nodes" />        </Property>      </MetaProperties>      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="FieldName" />        </NodeDisplay>        <Property attributeName="SourceFieldNo" merge="true">          <Category format="TemplateField Nodes">          </Category>        </Property>        <Property attributeName="FieldNo" merge="true">          <Category format="TemplateField Nodes">          </Category>        </Property>      </AsNode>    </ComplexTypeDef>    <ComplexTypeDef select="//xs:complexType[@name='NumberTemplateField']" nodeTypeName="NumberTemplate" SerializeDeserializeConverter="org.eclipse.smila.search.rapiddeployer.converters.TemplateFieldSerializeConverter">      <CustomValidator type="BROX.Windows.Forms.XMLTreeView.Validators.EvalValidator">        <ConstructorParameter type="System.String" description="Excluded parameters from normal validation" />        <ConstructorParameter type="System.String" description="Evaluated Expression">          <Value><![CDATA[LessOrEqual("Min", "Max")]]></Value>        </ConstructorParameter>      </CustomValidator>      <MetaProperties>        <Property name="as:Min" type="long" merge="true">          <Category format="TemplateField Search Nodes" />        </Property>        <Property name="as:Max" type="long" merge="true">          <Category format="TemplateField Search Nodes" />        </Property>        <Property name="as:FieldName" merge="true">          <Category format="Field Nodes" />        </Property>      </MetaProperties>      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="FieldName" />        </NodeDisplay>        <Property attributeName="SourceFieldNo" merge="true">          <Category format="TemplateField Nodes">          </Category>        </Property>        <Property attributeName="FieldNo" merge="true">          <Category format="TemplateField Nodes">          </Category>        </Property>      </AsNode>    </ComplexTypeDef>    <ComplexTypeDef select="//xs:complexType[@name='DateTemplateField']" nodeTypeName="DateTemplate" SerializeDeserializeConverter="org.eclipse.smila.search.rapiddeployer.converters.TemplateFieldSerializeConverter">      <CustomValidator type="BROX.Windows.Forms.XMLTreeView.Validators.EvalValidator">        <ConstructorParameter type="System.String" description="Excluded parameters from normal validation" />        <ConstructorParameter type="System.String" description="Evaluated Expression">          <Value><![CDATA[LessOrEqual("Min", "Max")]]></Value>        </ConstructorParameter>      </CustomValidator>      <MetaProperties>        <Property name="as:Min" type="dateTime" merge="true">          <Category format="TemplateField Search Nodes" />        </Property>        <Property name="as:Max" type="dateTime" merge="true">          <Category format="TemplateField Search Nodes" />        </Property>        <Property name="as:FieldName" merge="true">          <Category format="Field Nodes" />        </Property>      </MetaProperties>      <AsNode>        <NodeDisplay>          <Label IsLinkedProperty="true" format="FieldName" />        </NodeDisplay>        <Property attributeName="SourceFieldNo" merge="true">          <Category format="TemplateField Nodes">          </Category>        </Property>        <Property attributeName="FieldNo" merge="true">          <Category format="TemplateField Nodes">          </Category>        </Property>      </AsNode>    </ComplexTypeDef>    <!-- Parameters defenition -->    <ElementDef select="//xs:schema[@targetNamespace='http://www.anyfinder.de/Search/TextField']/xs:element[@name='Parameter']" nodeTypeName="TextParameter">      <AsNode>        <Property attributeName="Operator">          <Category format="Parameter">          </Category>        </Property>        <Property attributeName="Tolerance">          <Category format="Parameter">          </Category>        </Property>        <Property attributeName="CodecClass" hide="true">        </Property>      </AsNode>    </ElementDef>    <ElementDef select="//xs:schema[@targetNamespace='http://www.anyfinder.de/Search/DateField']/xs:element[@name='Parameter']" nodeTypeName="DateParameter">      <AsNode>        <Property attributeName="CodecClass" hide="true">        </Property>      </AsNode>    </ElementDef>    <ElementDef select="//xs:schema[@targetNamespace='http://www.anyfinder.de/Search/NumberField']/xs:element[@name='Parameter']" nodeTypeName="NumberParameter">      <AsNode>        <Property attributeName="CodecClass" hide="true">        </Property>      </AsNode>    </ElementDef>    <!-- Define transformers -->    <ElementDef select="//xs:complexType[@name='TemplateField']//xs:element[@ref='po:NodeTransformer']">      <AsProperty UITypeEditor="AnyFinder.Tools.UIEditors.NodeTransformerEditor" SerializerDeserializer="org.eclipse.smila.search.rapiddeployer.serializers.NodeTransformerSerializerDeserializer">        <Category format="TemplateField Nodes">        </Category>      </AsProperty>    </ElementDef>    <ElementDef select="//xs:complexType[@name='TemplateField']//xs:element[@ref='po:Transformer']">      <AsProperty UITypeEditor="AnyFinder.Tools.UIEditors.TransformerEditor" SerializerDeserializer="org.eclipse.smila.search.rapiddeployer.serializers.TransformerSerializerDeserializer">        <Category format="TemplateField Nodes">        </Category>      </AsProperty>    </ElementDef>    <!-- Operators -->    <!-- OP_1 -->    <ElementDef select="/xs:schema/xs:element[@name='Term']//xs:element[@name='OP_1']" nodeTypeName="OP_1">      <AsNode>        <Property attributeName="Operation">          <Category format="OP_1 Nodes">          </Category>        </Property>      </AsNode>    </ElementDef>    <!-- OP_N -->    <ElementDef select="/xs:schema/xs:element[@name='Term']//xs:element[@name='OP_N']" nodeTypeName="OP_N">      <AsNode>        <Property attributeName="Operation">          <Category format="OP_N Nodes">          </Category>        </Property>      </AsNode>    </ElementDef>    <!-- WMEAN -->    <ElementDef select="/xs:schema/xs:element[@name='Term']//xs:element[@name='WMEAN']" nodeTypeName="WMEAN">      <AsNode>        <Property attributeName="Operation">          <Category format="WMEAN Nodes">          </Category>        </Property>      </AsNode>    </ElementDef>    <ElementDef select="/xs:schema/xs:element[@name='Term']//xs:element[@name='WMEAN']//xs:element[@name='Constraint']">      <AsContextProperty merge="true">        <Category format="WMEAN Nodes">        </Category>      </AsContextProperty>    </ElementDef>    <ElementDef select="/xs:schema/xs:element[@name='Term']//xs:element[@name='WMEAN']//xs:element[@name='Boost']">      <AsContextProperty merge="true">        <Category format="WMEAN Nodes">        </Category>      </AsContextProperty>    </ElementDef>    <!-- common configuration for both simple and advanced search -->    <ComplexTypeDef select="//xs:complexType[@name='Float']" nodeTypeName="Float_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='FloatList']" nodeTypeName="FloatList_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='Date']" nodeTypeName="Date_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='DateList']" nodeTypeName="DateList_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='Boolean']" nodeTypeName="Boolean_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='String']" nodeTypeName="String_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='StringList']" nodeTypeName="StringList_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='Integer']" nodeTypeName="Integer_Parameter" />    <ComplexTypeDef select="//xs:complexType[@name='IntegerList']" nodeTypeName="IntegerList_Parameter" />    <ElementDef select="/xs:schema/xs:complexType[@name='Float']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='FloatList']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='Boolean']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='String']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='StringList']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='Integer']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='IntegerList']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='Date']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <ElementDef select="/xs:schema/xs:complexType[@name='DateList']//xs:element[@name='Value']">      <AsProperty />    </ElementDef>    <!-- common configuration for both simple and advanced search -->  </SchemaRedefinition></XMLTreeViewConfig>